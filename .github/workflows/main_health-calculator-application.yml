# Configuration du déploiement d'une application Python vers Azure Web App
# Documentation de l'action Azure Web Apps Deploy: https://github.com/Azure/webapps-deploy
# Plus d'actions GitHub pour Azure: https://github.com/Azure/actions
# Plus d'informations sur Python, GitHub Actions et Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - health-calculator-application

# Définit quand le workflow sera déclenché
on:
  push:
    branches:
      - main  # Se déclenche lors d'un push sur la branche main
  workflow_dispatch:  # Permet le déclenchement manuel du workflow

jobs:
  build:
    runs-on: ubuntu-latest  # Utilise la dernière version d'Ubuntu comme environnement d'exécution
    steps:
      # Étape 1: Checkout du code source
      - uses: actions/checkout@v4

      # Étape 2: Configuration de l'environnement Python
      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'  # Utilise Python 3.12

      # Étape 3: Initialisation de l'environnement
      - name: Create env
        run: make init

      # Étape 4: Installation des dépendances
      - name: Install dependencies
        run: make install
        
      # Étape 5: Construction de l'image Docker
      - name: Build Docker image
        run: make build
        
      # Étape 6: Démarrage du conteneur Docker
      - name: Start Docker 
        run: make run
        
      # Étape 7: Exécution des tests API
      - name: Run tests
        run: make test-api

      # Étape 8: Exécution de l'application pour les tests
      - name: Run App
        run: make test
        
      # Étape 9: Création de l'archive pour le déploiement
      - name: Zip artifact for deployment
        run: zip release.zip ./* -r  # Compresse tous les fichiers du projet

      # Étape 10: Upload de l'artefact pour le job de déploiement
      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !venv/  # Exclut le dossier venv de l'artefact

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Dépend du job 'build'
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}  # URL de l'application déployée
    permissions:
      id-token: write  # Requis pour l'authentification JWT

    steps:
      # Étape 1: Téléchargement de l'artefact du job de build
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      # Étape 2: Décompression de l'artefact pour le déploiement
      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      # Étape 3: Connexion à Azure
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_4E2D17BC64604E85B3C171A0604BE4B7 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_17E56331213947E3B11E4CA90862340C }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_EB303F64DFF7489FB5A897CD0BA71227 }}

      # Étape 4: Déploiement vers Azure Web App
      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'health-calculator-application'  # Nom de l'application
          slot-name: 'Production'  # Slot de déploiement
